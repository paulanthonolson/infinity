(define primes
  (lambda (n)
    (primefunc 0 0 n)
    )
  )
(define primefunc
  (lambda (x count n)
        (cond ( (= count n) '()) 
              ( (is_prime x) (and (display (string-append  (number->string x) " ")) (primefunc (+ 1 x) (+ 1 count) n))) 
              (else (primefunc (+ 1 x) count n))
          )
    )
  )
(define prime
  (lambda (n)
    (cond ( (= n 2) 2)
          ( (is_prime n) (and (display (string-append  (number->string n) " ")) (prime (- n 1)) ))
          (else (prime (- n 1)))
          )
    )
  )
(define is_prime
  (lambda (n)
    (cond ( (<= n 1) #f)
          ( (<= n 3) #t)
          ( (or (= 0 (remainder n 2)) (= 0 (remainder n 3))) #f)
          (else (is_primeloop 5 n))
          )
    )
  )
(define is_primeloop
  (lambda (i n)
    (if (<= (* i i) n)
        (if (or (= 0 (remainder n i)) (= 0 (remainder n (+ i 2))))
            #f
            (is_primeloop (+ i 6) n))
        #t)
    )
  )